package workflow

import (
	"context"
	v1alpha12 "github.com/argoproj/argo/pkg/apis/workflow/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"

	"github.com/Azure/Orkestra/api/v1alpha1"
	"github.com/go-logr/logr"
)

const (
	Project        = "orkestra"
	OwnershipLabel = "owner"
	HeritageLabel  = "heritage"
)

type Engine interface {
	// Generate the object required by the workflow engine
	Generate(ctx context.Context, l logr.Logger, g *v1alpha1.ApplicationGroup) error
	// Submit the object required by the workflow engine generated by the Generate method
	Submit(ctx context.Context, l logr.Logger, g *v1alpha1.ApplicationGroup) error
}

type ForwardEngine struct {
	client.Client
	stagingRepoURL string
	parallelism    *int64

	workflow *v1alpha12.Workflow
}

type ReverseEngine struct {
	client.Client
	stagingRepoURL string
	parallelism    *int64

	nodes map[string]v1alpha12.NodeStatus
	forwardWorkflow *v1alpha12.Workflow
	reverseWorkflow *v1alpha12.Workflow
}

func WorkflowFactory(workflowType string, client client.Client, stagingRepoURL string, workflowParallelism *int64) Engine {
	switch workflowType {
	case "forward":
		return ForwardEngine{
			Client: client,
			stagingRepoURL: stagingRepoURL,
			parallelism: workflowParallelism,
		}
	case "backward":
		return ReverseEngine{
			Client: client,
			stagingRepoURL: stagingRepoURL,
			parallelism: workflowParallelism,
			nodes
		}
	}
	return nil
}

func initWorkflowObject(parallelism *int64) *v1alpha12.Workflow {
	return &v1alpha12.Workflow{
		ObjectMeta: v1.ObjectMeta{
			Labels: map[string]string{HeritageLabel: Project},
		},
		TypeMeta: v1.TypeMeta{
			APIVersion: v1alpha12.WorkflowSchemaGroupVersionKind.GroupVersion().String(),
			Kind:       v1alpha12.WorkflowSchemaGroupVersionKind.Kind,
		},
		Spec: v1alpha12.WorkflowSpec{
			Entrypoint:  EntrypointTemplateName,
			Templates:   make([]v1alpha12.Template, 0),
			Parallelism: parallelism,
			PodGC: &v1alpha12.PodGC{
				Strategy: v1alpha12.PodGCOnWorkflowCompletion,
			},
		},
	}
}

func updateWorkflowTemplates(wf *v1alpha12.Workflow, tpls ...v1alpha12.Template) {
	wf.Spec.Templates = append(wf.Spec.Templates, tpls...)
}